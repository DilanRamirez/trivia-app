{"version":3,"sources":["components/Cards/Cards.module.css","api/api.js","components/Cards/Cards.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","fetchData","a","axios","get","response","questionData","title","data","map","item","category","question","answer","airDate","Date","airdate","toDateString","console","log","Cards","useState","showAnswer","setShowAnswer","className","styles","container","Grid","component","Card","card","CardContent","Typography","color","variant","gutterBottom","Button","topSpace","onClick","App","state","this","setState","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kGACAA,EAAOC,QAAU,CAAC,UAAY,yBAAyB,KAAO,oBAAoB,OAAS,sBAAsB,SAAW,0B,2OCG/GC,EAAS,uCAAG,8BAAAC,EAAA,+EAEMC,IAAMC,IAJzB,kCAEa,cAEXC,EAFW,OAIXC,EAAe,CACjBC,MAAOF,EAASG,KAAKC,KAAI,SAACC,GAAD,OAAUA,EAAKC,SAASJ,SACjDK,SAAUP,EAASG,KAAKC,KAAI,SAACC,GAAD,OAAUA,EAAKE,YAC3CC,OAAQR,EAASG,KAAKC,KAAI,SAACC,GAAD,OAAUA,EAAKG,UACzCC,QAAS,IAAIC,KAAKV,EAASG,KAAKC,KAAI,SAACC,GAAD,OAAUA,EAAKM,YAAUC,gBARhD,kBAYVX,GAZU,gCAcjBY,QAAQC,IAAR,MAdiB,yDAAH,qD,8ECsBPC,EApBD,SAAC,GAA+C,IAAD,IAA7CZ,KAAMD,EAAuC,EAAvCA,MAAOK,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAAc,EAErBO,oBAAS,GAFY,mBAElDC,EAFkD,KAEtCC,EAFsC,KAKzD,OACI,yBAAKC,UAAYC,IAAOC,WACpB,kBAACC,EAAA,EAAD,CAAMjB,MAAI,EAACkB,UAAWC,IAAML,UAAWC,IAAOK,MAC1C,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,MAAM,cAAcC,QAAQ,KAAKC,cAAY,GAAE5B,GAC3D,kBAACyB,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,QAAQ,MAAMtB,GAChD,kBAACwB,EAAA,EAAD,CAAQF,QAAQ,YAAYD,MAAM,YAAYT,UAAWC,IAAOY,SAAUC,QAR1E,kBAAMf,GAAc,KAQpB,eACED,EAAa,kBAACU,EAAA,EAAD,CAAYR,UAAWC,IAAOZ,OAAQqB,QAAQ,MAAMrB,GAAuB,KAC1F,kBAACmB,EAAA,EAAD,CAAYR,UAAWC,IAAOY,SAAUJ,MAAM,iBAAiBnB,OCQpEyB,G,yNApBbC,MAAQ,CACNhC,KAAM,I,kMAIaP,I,OAAbO,E,OACNiC,KAAKC,SAAS,CAAElC,S,qIAGR,IACDA,EAAQiC,KAAKD,MAAbhC,KACP,OACE,6BACE,kBAAC,EAAD,CAAOA,KAAOA,S,GAdJmC,IAAMC,YCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC,c","file":"static/js/main.a999fb7c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2ywTx\",\"card\":\"Cards_card__3ojXP\",\"answer\":\"Cards_answer__1Nje9\",\"topSpace\":\"Cards_topSpace__2DoXJ\"};","import axios from \"axios\";\r\n\r\nconst url = \"https://jservice.io/api/random\";\r\n\r\nexport const fetchData = async () => {  \r\n    try {\r\n        const response = await axios.get(url);\r\n\r\n        const questionData = {\r\n            title: response.data.map((item) => item.category.title),\r\n            question: response.data.map((item) => item.question),\r\n            answer: response.data.map((item) => item.answer), \r\n            airDate: new Date(response.data.map((item) => item.airdate)).toDateString()\r\n        }\r\n\r\n        // console.log(questionData)\r\n        return questionData\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nconst urlSearch = \"https://jservice.io/search\";\r\n\r\nexport const fetchDataSearch = async (category) => {  \r\n    try {\r\n        console.log(`${urlSearch}/${category}`)\r\n        const response = await axios.get(`${urlSearch}/${category}`);\r\n\r\n        console.log(\"Success:\",response)\r\n    } catch (error) {\r\n        console.log(\"Error:\",error);\r\n    }\r\n}","import React, { useState } from 'react';\r\nimport { Card, CardContent, Typography, Grid, Button } from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\n\r\nimport styles from './Cards.module.css';\r\n\r\nconst Cards = ({data:{title, question, answer, airDate}}) => {\r\n    \r\n    const [showAnswer, setShowAnswer] = useState(false);\r\n    const onClick = () => setShowAnswer(true);\r\n\r\n    return (\r\n        <div className={ styles.container}>\r\n            <Grid item component={Card} className={styles.card}>\r\n                <CardContent>\r\n                    <Typography color=\"textPrimary\" variant=\"h4\" gutterBottom>{title}</Typography>\r\n                    <Typography color=\"textSecondary\" variant=\"h6\">{question}</Typography>\r\n                    <Button variant=\"contained\" color=\"secondary\" className={styles.topSpace} onClick={onClick}>Show Answer</Button>\r\n                    { showAnswer ? <Typography className={styles.answer} variant=\"h6\">{answer}</Typography> : null}\r\n                    <Typography className={styles.topSpace} color=\"textSecondary\">{airDate}</Typography>\r\n                </CardContent>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import React from 'react';\nimport { fetchData } from './api/api';\nimport Cards from './components/Cards/Cards';\nimport Search from './components/Search/Search';\nimport './App.css';\n\nclass App extends React.Component{\n  state = {\n    data: {},\n  }\n\n  async componentDidMount() {\n    const data = await fetchData();\n    this.setState({ data });\n  }\n\n  render (){\n    const {data} = this.state;\n    return(\n      <div>\n        <Cards data={ data }/>\n        {/* <Search/> */}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}